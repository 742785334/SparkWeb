scala学习笔记

变量
Scala语言定义变量有三种方式 
1：val定义常量 
2：var定义变量 
3：lazy val定义懒变量，对应的变量第一次使用时才会计算对应的变量值

作用域保护
private[x] 或 protected[x]

def functionName ([参数列表]) : [return type] = {
   function body
   return [expr]
}

Scala 闭包
var z:Array[String] = new Array[String](3)
var z = Array("Runoob", "Baidu", "Google")
for ( x <- myList ) {
         println( x )
}

多维数组
var myMatrix = ofDim[Int](3,3)
for (i <- 0 to 2) {
         for ( j <- 0 to 2) {
            print(" " + myMatrix(i)(j));
         }
         println();
      }

scala> Array.tabulate(3)(a => a + 5)
res0: Array[Int] = Array(5, 6, 7)


// 定义整型 List
val x = List(1,2,3,4)

// 定义 Set
val x = Set(1,3,5,7)

// 定义 Map
val x = Map("one" -> 1, "two" -> 2, "three" -> 3)

模式匹配
 def matchTest(x: Int): String = x match {
      case 1 => "one"
      case 2 => "two"
      case _ => "many"
   }

样例类
使用了case关键字的类定义就是就是样例类(case classes)，样例类是种特殊的类，经过优化以用于模式匹配
case class Person(name: String, age: Int)
不用new就可以直接产生对象（只要在object提供一个apply方法）

case class xxx (name:String,author:String)

val x=xxx(......)
x match{
  
	
}

正则匹配
import scala.util.matching.Regex

object Test {
   def main(args: Array[String]) {
      val pattern = new Regex("abl[ae]\\d+")
      val str = "ablaw is able1 and cool"
      
      println((pattern findAllIn str).mkString(","))
   }
}


def add(x:Int)(y:Int) = x+y
调用：add(1)(2)


def printEveryChar(c:String*) = {
c.foreach(x => println(x))
}

def hello(name: String ="ChinaSpark")//默认值

val a = if(x>0) 1 else 0

var (n,r)=(10,0)

for(i <- 1 to 10){
	println(i)
}

for(i <- 1 util 10){
	println(i)
}

for(i <- 1 to 10 if i%2==0){
	println(i)
}

var name: String =_//会生成getter和setter方法
val age = 10//只会生成getter方法

如果参数声明不带val或var，相当于pirvate[this]

方法属性重写
override val school ="..."
override def toString = "..."

abstract class Person{
...
}

trait--能够带有具体实现方法的接口

trait xx{

}

第一个混入使用extends
class Test extends xx{}

class Test with xx{}

value match｛
 case 1 if 1==1 ==>"one"

｝

高阶函数
list.map((x:Int)=>2*x)
list.map((x) =>2*x)
list.map(x => 2*x)
list,map(2*_)

集合：List，Set，Turple，Map

m=map（“1”->"2"）
m(1)
m.get(1)
m.get(2).getOrElse("None")//option类型,可有可无的类型

元组：val hostPost =（“xx”，“xx ”）
元组访问：hostPost._1,hostPost._2
"a" -> "b"

集合操作：
foreach,,map,filter,zip,partition,flattern,flatMap

val l = List(1,2,3)
l.map(3*_)
l.foreach(3*_)
l.filter(x => x%2==0)
a.zip(b)
z zip b
l.partition(_%2 == 0)
val l = List(List("a","b"),List("c","d")).flatten

隐式转换，隐式参数，隐式类
class A｛｝

class RichA(a:A){//扩展A
   def rich{
	println("xx")
}
}

implicit def a2RichA(a:A) = new RichA(a)
val a = new A
a.rich

--------------
def testParam(implicit name:String){
	println(name)
}
implicit val name="xxx"
testParam

---------------
implicit class Calculator(x:Int){
   def add(a:Int):Int = a+1
}

println(1.add(1))